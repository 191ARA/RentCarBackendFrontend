rentacar
└── src
    └── main
        ├── java
        │   └── com.example.rentacar
        │               ├── controller
        │               ├── model
        │               ├── repository
        │               └── RentacarApplication.java
        └── resources
            ├── application.properties
            └── static



Документация проекта "Rent a Car"

1. Введение
Проект "Rent a Car" представляет собой веб-приложение для аренды автомобилей. Пользователи могут регистрироваться, авторизовываться, просматривать доступные автомобили, бронировать их и управлять своими бронированиями. Администраторы имеют доступ к управлению пользователями, автомобилями и бронированиями через специальную панель управления.

2. Технологии
- Backend: Spring Boot (Java)
- Frontend: HTML, CSS, JavaScript
- База данных: PostgreSQL
- Сборка: Maven

3. Структура проекта

3.1. Backend
- Контроллеры:
  - AdminController: Управление пользователями, автомобилями и бронированиями для администраторов.
  - AuthController: Регистрация и авторизация пользователей.
  - BookingController: Управление бронированиями.
  - CarController: Получение списка автомобилей.

- Модели:
  - Booking: Модель бронирования.
  - Car: Модель автомобиля.
  - User: Модель пользователя.

- Репозитории:
  - BookingRepository: Репозиторий для работы с бронированиями.
  - CarRepository: Репозиторий для работы с автомобилями.
  - UserRepository: Репозиторий для работы с пользователями.

3.2. Frontend
- HTML-страницы:
  - index.html: Главная страница с информацией о сервисе и списком автомобилей.
  - login.html: Страница входа в систему.
  - register.html: Страница регистрации.
  - profile.html: Страница профиля пользователя с бронированиями и доступными автомобилями.
  - admin.html: Панель администратора для управления пользователями, автомобилями и бронированиями.

- CSS-стили:
  - auth.css: Стили для страниц авторизации и регистрации.
  - profile.css: Стили для страницы профиля.
  - styles.css: Основные стили для всего приложения.

- JavaScript:
  - app.js: Основной скрипт для работы с API и управления интерфейсом.
  - profile.js: Скрипт для работы с профилем пользователя и бронированиями.

4. API

4.1. AuthController
- POST /api/register: Регистрация нового пользователя.
  - Параметры: name, email, password.
  - Ответ: { "success": boolean, "message": string }.

- POST /api/login: Авторизация пользователя.
  - Параметры: email, password.
  - Ответ: { "success": boolean, "message": string, "userId": number, "role": string }.

- GET /api/users/{id}: Получение информации о пользователе по ID.
  - Ответ: User.

4.2. BookingController
- POST /api/bookings: Бронирование автомобиля.
  - Параметры: userId, carId, startDate, endDate.
  - Ответ: { "success": boolean, "message": string }.

- GET /api/bookings: Получение списка бронирований пользователя.
  - Параметры: userId.
  - Ответ: { "success": boolean, "bookings": Booking[] }.

4.3. CarController
- GET /api/cars: Получение списка всех автомобилей.
  - Ответ: Car[].

4.4. AdminController
- GET /api/admin/users: Получение списка всех пользователей.
  - Ответ: User[].

- GET /api/admin/users/{id}: Получение информации о пользователе по ID.
  - Ответ: User.

- POST /api/admin/users: Создание нового пользователя.
  - Параметры: User.
  - Ответ: User.

- PUT /api/admin/users/{id}: Обновление информации о пользователе.
  - Параметры: User.
  - Ответ: User.

- DELETE /api/admin/users/{id}: Удаление пользователя.
  - Ответ: 200 OK.

- GET /api/admin/cars: Получение списка всех автомобилей.
  - Ответ: Car[].

- GET /api/admin/cars/{id}: Получение информации об автомобиле по ID.
  - Ответ: Car.

- POST /api/admin/cars: Создание нового автомобиля.
  - Параметры: Car.
  - Ответ: Car.

- PUT /api/admin/cars/{id}: Обновление информации об автомобиле.
  - Параметры: Car.
  - Ответ: Car.

- DELETE /api/admin/cars/{id}: Удаление автомобиля.
  - Ответ: 200 OK.

- GET /api/admin/bookings: Получение списка всех бронирований.
  - Ответ: Booking[].

- GET /api/admin/bookings/{id}: Получение информации о бронировании по ID.
  - Ответ: Booking.

- DELETE /api/admin/bookings/{id}: Удаление бронирования.
  - Ответ: 200 OK.

5. База данных
- Таблицы:
  - users: Пользователи.
  - cars: Автомобили.
  - bookings: Бронирования.


6. Фронтенд

6.1. Главная страница (index.html)
- Описание: На главной странице представлена информация о сервисе, список доступных автомобилей и инструкция по бронированию.
- Функционал:
- Просмотр автомобилей с возможностью сортировки и фильтрации.
- Переход на страницы регистрации и входа.

6.2. Страница входа (login.html)
- Описание: Страница для входа в систему.
- Функционал:
- Ввод email и пароля.
- Переход на страницу регистрации.

6.3. Страница регистрации (register.html)
- Описание: Страница для регистрации нового пользователя.
- Функционал:
- Ввод имени, email и пароля.
- Переход на страницу входа.

6.4. Страница профиля (profile.html)
- Описание: Страница профиля пользователя с информацией о бронированиях и доступных автомобилях.
- Функционал:
- Просмотр текущих бронирований.
- Бронирование новых автомобилей.
- Выход из системы.

6.5. Панель администратора (admin.html)
- Описание: Панель управления для администраторов.
- Функционал:
- Управление пользователями, автомобилями и бронированиями.
- Добавление, редактирование и удаление записей.

Заключение
Проект "Rent a Car" представляет собой полнофункциональное веб-приложение для аренды автомобилей. Он обеспечивает удобный интерфейс для пользователей и администраторов, а также надежную backend-логику для управления данными.

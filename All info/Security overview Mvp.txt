The project uses Spring Security and JWT tokens for authentication and authorization, ensuring secure access to API endpoints.

 Key Security Components
ðŸ”¹ Spring Security â€“ Manages authentication and authorization.
ðŸ”¹ JWT (JSON Web Token) â€“ Eliminates the need for session-based authentication.
ðŸ”¹ Roles & Permissions â€“ Different access levels for USER and ADMIN.
ðŸ”¹ API Protection â€“ Every request must include a valid JWT token.
ðŸ”¹ Password Hashing â€“ Uses BCrypt to securely store passwords.

1. Authentication (JWT Tokens)
ðŸ”¹ When a user logs in, the server generates a JWT token.
ðŸ”¹ The client must include this token in the Authorization: Bearer <token> header for all API requests.
ðŸ”¹ JWT ensures stateless authentication, meaning the server does not need to store session data.

Authentication Process:

The user sends a POST /api/auth/login request with email and password.

If the credentials are correct, the server creates a JWT token and sends it to the client.

The client includes this token in every request to access protected routes.

2. Authorization (Role-Based Access Control)
ðŸ”¹ ADMIN Role â€“ Can manage cars (add, delete, update).
ðŸ”¹ USER Role â€“ Can browse available cars and make bookings.

API endpoints are protected based on user roles, preventing unauthorized access.

3. Password Security
ðŸ”¹ BCrypt hashing ensures that passwords are stored securely.
ðŸ”¹ Even if the database is compromised, attackers cannot retrieve plain-text passwords.

4. API Security Measures
ðŸ”¹ Token-based authentication ensures only authorized users can access protected routes.
ðŸ”¹ Request validation â€“ The server checks the JWT token before processing a request.
ðŸ”¹ Protection against CSRF & XSS attacks â€“ Spring Security includes built-in protection.